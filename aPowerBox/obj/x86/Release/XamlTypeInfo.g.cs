//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace aPowerBox
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::aPowerBox.aPowerBox_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace aPowerBox.aPowerBox_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[62];
            _typeNameTable[0] = "aPowerBox.PowerViewModel";
            _typeNameTable[1] = "Albert.Flex.Runtime.ViewModel";
            _typeNameTable[2] = "Albert.Flex.Notify";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "Windows.Storage.ApplicationDataContainer";
            _typeNameTable[5] = "Windows.Storage.StorageFolder";
            _typeNameTable[6] = "Windows.UI.Color";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "Byte";
            _typeNameTable[9] = "Albert.Flex.Runtime.CmdBar";
            _typeNameTable[10] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[11] = "Albert.Flex.Runtime.CmdButton";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.AppBarButton";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[14] = "Albert.Flex.Runtime.PushButton";
            _typeNameTable[15] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[16] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[17] = "String";
            _typeNameTable[18] = "Int32";
            _typeNameTable[19] = "Windows.UI.Xaml.CornerRadius";
            _typeNameTable[20] = "Albert.Flex.Runtime.OptionButton";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.RadioButton";
            _typeNameTable[22] = "Double";
            _typeNameTable[23] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[24] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[25] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[26] = "Albert.Flex.Runtime.HamburgerButton";
            _typeNameTable[27] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[28] = "Albert.Flex.Runtime.TextEdit";
            _typeNameTable[29] = "Windows.UI.Xaml.Controls.RichEditBox";
            _typeNameTable[30] = "Boolean";
            _typeNameTable[31] = "aPowerBox.View.BannerMaker";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[33] = "Albert.Flex.Runtime.Page10x";
            _typeNameTable[34] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[35] = "aPowerBox.View.CharacterLab";
            _typeNameTable[36] = "aPowerBox.View.CharacterLab.SheetState";
            _typeNameTable[37] = "System.Enum";
            _typeNameTable[38] = "aPowerBox.View.LaunchHub";
            _typeNameTable[39] = "aPowerBox.View.MainView";
            _typeNameTable[40] = "aPowerBox.View.MapLab";
            _typeNameTable[41] = "aPowerBox.View.PDfView";
            _typeNameTable[42] = "aPowerBox.View.QuickNote";
            _typeNameTable[43] = "Albert.Flex.Runtime.ColorPicker";
            _typeNameTable[44] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[45] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[46] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[47] = "aPowerBox.View.QuickTheme";
            _typeNameTable[48] = "Albert.Flex.Runtime.SketchCanvas";
            _typeNameTable[49] = "Windows.UI.Xaml.Controls.Canvas";
            _typeNameTable[50] = "Albert.Flex.Runtime.SketchState";
            _typeNameTable[51] = "Windows.UI.Xaml.Media.PenLineCap";
            _typeNameTable[52] = "aPowerBox.View.SketchLab";
            _typeNameTable[53] = "aPowerBox.View.StartView";
            _typeNameTable[54] = "aPowerBox.View.StaticWeb";
            _typeNameTable[55] = "aPowerBox.View.ThemeLab";
            _typeNameTable[56] = "aPowerBox.View.WebBanner";
            _typeNameTable[57] = "aPowerBox.View.WPPlug";
            _typeNameTable[58] = "aPowerBox.View.WPTheme";
            _typeNameTable[59] = "aPowerBox.View.WebDevLab";
            _typeNameTable[60] = "aPowerBox.View.WriterLab";
            _typeNameTable[61] = "AMUwp.QuickTheme";

            _typeTable = new global::System.Type[62];
            _typeTable[0] = typeof(global::aPowerBox.PowerViewModel);
            _typeTable[1] = typeof(global::Albert.Flex.Runtime.ViewModel);
            _typeTable[2] = typeof(global::Albert.Flex.Notify);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::Windows.Storage.ApplicationDataContainer);
            _typeTable[5] = typeof(global::Windows.Storage.StorageFolder);
            _typeTable[6] = typeof(global::Windows.UI.Color);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::System.Byte);
            _typeTable[9] = typeof(global::Albert.Flex.Runtime.CmdBar);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[11] = typeof(global::Albert.Flex.Runtime.CmdButton);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.AppBarButton);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[14] = typeof(global::Albert.Flex.Runtime.PushButton);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[17] = typeof(global::System.String);
            _typeTable[18] = typeof(global::System.Int32);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.CornerRadius);
            _typeTable[20] = typeof(global::Albert.Flex.Runtime.OptionButton);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.RadioButton);
            _typeTable[22] = typeof(global::System.Double);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[26] = typeof(global::Albert.Flex.Runtime.HamburgerButton);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[28] = typeof(global::Albert.Flex.Runtime.TextEdit);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Controls.RichEditBox);
            _typeTable[30] = typeof(global::System.Boolean);
            _typeTable[31] = typeof(global::aPowerBox.View.BannerMaker);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[33] = typeof(global::Albert.Flex.Runtime.Page10x);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[35] = typeof(global::aPowerBox.View.CharacterLab);
            _typeTable[36] = typeof(global::aPowerBox.View.CharacterLab.SheetState);
            _typeTable[37] = typeof(global::System.Enum);
            _typeTable[38] = typeof(global::aPowerBox.View.LaunchHub);
            _typeTable[39] = typeof(global::aPowerBox.View.MainView);
            _typeTable[40] = typeof(global::aPowerBox.View.MapLab);
            _typeTable[41] = typeof(global::aPowerBox.View.PDfView);
            _typeTable[42] = typeof(global::aPowerBox.View.QuickNote);
            _typeTable[43] = typeof(global::Albert.Flex.Runtime.ColorPicker);
            _typeTable[44] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[45] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[47] = typeof(global::aPowerBox.View.QuickTheme);
            _typeTable[48] = typeof(global::Albert.Flex.Runtime.SketchCanvas);
            _typeTable[49] = typeof(global::Windows.UI.Xaml.Controls.Canvas);
            _typeTable[50] = typeof(global::Albert.Flex.Runtime.SketchState);
            _typeTable[51] = typeof(global::Windows.UI.Xaml.Media.PenLineCap);
            _typeTable[52] = typeof(global::aPowerBox.View.SketchLab);
            _typeTable[53] = typeof(global::aPowerBox.View.StartView);
            _typeTable[54] = typeof(global::aPowerBox.View.StaticWeb);
            _typeTable[55] = typeof(global::aPowerBox.View.ThemeLab);
            _typeTable[56] = typeof(global::aPowerBox.View.WebBanner);
            _typeTable[57] = typeof(global::aPowerBox.View.WPPlug);
            _typeTable[58] = typeof(global::aPowerBox.View.WPTheme);
            _typeTable[59] = typeof(global::aPowerBox.View.WebDevLab);
            _typeTable[60] = typeof(global::aPowerBox.View.WriterLab);
            _typeTable[61] = typeof(global::AMUwp.QuickTheme);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_PowerViewModel() { return new global::aPowerBox.PowerViewModel(); }
        private object Activate_9_CmdBar() { return new global::Albert.Flex.Runtime.CmdBar(); }
        private object Activate_11_CmdButton() { return new global::Albert.Flex.Runtime.CmdButton(); }
        private object Activate_14_PushButton() { return new global::Albert.Flex.Runtime.PushButton(); }
        private object Activate_20_OptionButton() { return new global::Albert.Flex.Runtime.OptionButton(); }
        private object Activate_26_HamburgerButton() { return new global::Albert.Flex.Runtime.HamburgerButton(); }
        private object Activate_28_TextEdit() { return new global::Albert.Flex.Runtime.TextEdit(); }
        private object Activate_31_BannerMaker() { return new global::aPowerBox.View.BannerMaker(); }
        private object Activate_33_Page10x() { return new global::Albert.Flex.Runtime.Page10x(); }
        private object Activate_35_CharacterLab() { return new global::aPowerBox.View.CharacterLab(); }
        private object Activate_38_LaunchHub() { return new global::aPowerBox.View.LaunchHub(); }
        private object Activate_39_MainView() { return new global::aPowerBox.View.MainView(); }
        private object Activate_40_MapLab() { return new global::aPowerBox.View.MapLab(); }
        private object Activate_41_PDfView() { return new global::aPowerBox.View.PDfView(); }
        private object Activate_42_QuickNote() { return new global::aPowerBox.View.QuickNote(); }
        private object Activate_43_ColorPicker() { return new global::Albert.Flex.Runtime.ColorPicker(); }
        private object Activate_47_QuickTheme() { return new global::aPowerBox.View.QuickTheme(); }
        private object Activate_48_SketchCanvas() { return new global::Albert.Flex.Runtime.SketchCanvas(); }
        private object Activate_52_SketchLab() { return new global::aPowerBox.View.SketchLab(); }
        private object Activate_53_StartView() { return new global::aPowerBox.View.StartView(); }
        private object Activate_54_StaticWeb() { return new global::aPowerBox.View.StaticWeb(); }
        private object Activate_55_ThemeLab() { return new global::aPowerBox.View.ThemeLab(); }
        private object Activate_56_WebBanner() { return new global::aPowerBox.View.WebBanner(); }
        private object Activate_57_WPPlug() { return new global::aPowerBox.View.WPPlug(); }
        private object Activate_58_WPTheme() { return new global::aPowerBox.View.WPTheme(); }
        private object Activate_59_WebDevLab() { return new global::aPowerBox.View.WebDevLab(); }
        private object Activate_60_WriterLab() { return new global::aPowerBox.View.WriterLab(); }
        private object Activate_61_QuickTheme() { return new global::AMUwp.QuickTheme(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  aPowerBox.PowerViewModel
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.ViewModel"));
                userType.Activator = Activate_0_PowerViewModel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Albert.Flex.Runtime.ViewModel
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Notify"));
                userType.AddMemberName("Settings");
                userType.AddMemberName("LocalFolder");
                xamlType = userType;
                break;

            case 2:   //  Albert.Flex.Notify
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Windows.Storage.ApplicationDataContainer
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 5:   //  Windows.Storage.StorageFolder
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Color
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  Byte
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  Albert.Flex.Runtime.CmdBar
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_9_CmdBar;
                xamlType = userType;
                break;

            case 10:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Albert.Flex.Runtime.CmdButton
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.AppBarButton"));
                userType.Activator = Activate_11_CmdButton;
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.AppBarButton
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Albert.Flex.Runtime.PushButton
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_14_PushButton;
                userType.AddMemberName("BackgroundPointerOver");
                userType.AddMemberName("ForegroundPointerOver");
                userType.AddMemberName("BackgroundPressed");
                userType.AddMemberName("NavString");
                userType.AddMemberName("TabCount");
                userType.AddMemberName("BorderBrushPointerOver");
                userType.AddMemberName("ForegroundPressed");
                userType.AddMemberName("BorderBrushPressed");
                userType.AddMemberName("CornerRadius");
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  String
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Int32
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.CornerRadius
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Albert.Flex.Runtime.OptionButton
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.RadioButton"));
                userType.Activator = Activate_20_OptionButton;
                userType.AddMemberName("BackgroundPointerOver");
                userType.AddMemberName("ForegroundPointerOver");
                userType.AddMemberName("BackgroundChecked");
                userType.AddMemberName("NavString");
                userType.AddMemberName("ImgOpacity");
                userType.AddMemberName("BorderBrushPointerOver");
                userType.AddMemberName("OptionVisibility");
                userType.AddMemberName("ForegroundChecked");
                userType.AddMemberName("BorderBrushChecked");
                userType.AddMemberName("CornerRadius");
                userType.AddMemberName("Source");
                userType.AddMemberName("Stretch");
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.Controls.RadioButton
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Double
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Albert.Flex.Runtime.HamburgerButton
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.PushButton"));
                userType.Activator = Activate_26_HamburgerButton;
                userType.AddMemberName("ShowSymbol");
                userType.AddMemberName("ShowImage");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IconStretch");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("Label");
                userType.AddMemberName("SymbolFontFamily");
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Albert.Flex.Runtime.TextEdit
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.RichEditBox"));
                userType.Activator = Activate_28_TextEdit;
                userType.AddMemberName("AcceptsTab");
                userType.AddMemberName("StringText");
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.Controls.RichEditBox
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Boolean
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  aPowerBox.View.BannerMaker
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_31_BannerMaker;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Albert.Flex.Runtime.Page10x
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_Page10x;
                xamlType = userType;
                break;

            case 34:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  aPowerBox.View.CharacterLab
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.Page10x"));
                userType.Activator = Activate_35_CharacterLab;
                userType.AddMemberName("State");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  aPowerBox.View.CharacterLab.SheetState
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("All", global::aPowerBox.View.CharacterLab.SheetState.All);
                userType.AddEnumValue("FrontBack", global::aPowerBox.View.CharacterLab.SheetState.FrontBack);
                userType.AddEnumValue("FrontSide", global::aPowerBox.View.CharacterLab.SheetState.FrontSide);
                userType.AddEnumValue("BackSide", global::aPowerBox.View.CharacterLab.SheetState.BackSide);
                userType.AddEnumValue("Front", global::aPowerBox.View.CharacterLab.SheetState.Front);
                userType.AddEnumValue("Back", global::aPowerBox.View.CharacterLab.SheetState.Back);
                userType.AddEnumValue("Side", global::aPowerBox.View.CharacterLab.SheetState.Side);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  System.Enum
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 38:   //  aPowerBox.View.LaunchHub
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_38_LaunchHub;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  aPowerBox.View.MainView
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.Page10x"));
                userType.Activator = Activate_39_MainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  aPowerBox.View.MapLab
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.Page10x"));
                userType.Activator = Activate_40_MapLab;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  aPowerBox.View.PDfView
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.Page10x"));
                userType.Activator = Activate_41_PDfView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  aPowerBox.View.QuickNote
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_42_QuickNote;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  Albert.Flex.Runtime.ColorPicker
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_43_ColorPicker;
                userType.AddMemberName("SpectrePointerColor");
                userType.AddMemberName("Color");
                userType.AddMemberName("Brush");
                userType.AddMemberName("HexCode");
                userType.AddMemberName("HtmlCode");
                xamlType = userType;
                break;

            case 44:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 46:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  aPowerBox.View.QuickTheme
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_47_QuickTheme;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Albert.Flex.Runtime.SketchCanvas
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Canvas"));
                userType.Activator = Activate_48_SketchCanvas;
                userType.AddMemberName("SketchState");
                userType.AddMemberName("DrawBrush");
                userType.AddMemberName("DrawThickness");
                userType.AddMemberName("DrawOpacity");
                userType.AddMemberName("StartPenLineCap");
                userType.AddMemberName("EndPenLineCap");
                xamlType = userType;
                break;

            case 49:   //  Windows.UI.Xaml.Controls.Canvas
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Albert.Flex.Runtime.SketchState
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Draw", global::Albert.Flex.Runtime.SketchState.Draw);
                userType.AddEnumValue("Line", global::Albert.Flex.Runtime.SketchState.Line);
                userType.AddEnumValue("Triangle", global::Albert.Flex.Runtime.SketchState.Triangle);
                userType.AddEnumValue("Rectangle", global::Albert.Flex.Runtime.SketchState.Rectangle);
                userType.AddEnumValue("Circle", global::Albert.Flex.Runtime.SketchState.Circle);
                userType.AddEnumValue("Star", global::Albert.Flex.Runtime.SketchState.Star);
                userType.AddEnumValue("Erase", global::Albert.Flex.Runtime.SketchState.Erase);
                userType.AddEnumValue("Disabled", global::Albert.Flex.Runtime.SketchState.Disabled);
                xamlType = userType;
                break;

            case 51:   //  Windows.UI.Xaml.Media.PenLineCap
                xamlType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  aPowerBox.View.SketchLab
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.Page10x"));
                userType.Activator = Activate_52_SketchLab;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  aPowerBox.View.StartView
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.Page10x"));
                userType.Activator = Activate_53_StartView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  aPowerBox.View.StaticWeb
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_54_StaticWeb;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  aPowerBox.View.ThemeLab
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_55_ThemeLab;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  aPowerBox.View.WebBanner
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_56_WebBanner;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  aPowerBox.View.WPPlug
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_57_WPPlug;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  aPowerBox.View.WPTheme
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_58_WPTheme;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  aPowerBox.View.WebDevLab
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_59_WebDevLab;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  aPowerBox.View.WriterLab
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Albert.Flex.Runtime.Page10x"));
                userType.Activator = Activate_60_WriterLab;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  AMUwp.QuickTheme
                userType = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_61_QuickTheme;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Albert.Flex.Runtime.AlbertRun_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewModel_Settings(object instance)
        {
            var that = (global::Albert.Flex.Runtime.ViewModel)instance;
            return that.Settings;
        }
        private object get_1_ViewModel_LocalFolder(object instance)
        {
            var that = (global::Albert.Flex.Runtime.ViewModel)instance;
            return that.LocalFolder;
        }
        private object get_2_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_2_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_3_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_3_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_4_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_4_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_5_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_5_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_6_PushButton_BackgroundPointerOver(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.BackgroundPointerOver;
        }
        private void set_6_PushButton_BackgroundPointerOver(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.BackgroundPointerOver = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_7_PushButton_ForegroundPointerOver(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.ForegroundPointerOver;
        }
        private void set_7_PushButton_ForegroundPointerOver(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.ForegroundPointerOver = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_8_PushButton_BackgroundPressed(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.BackgroundPressed;
        }
        private void set_8_PushButton_BackgroundPressed(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.BackgroundPressed = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_9_PushButton_NavString(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.NavString;
        }
        private void set_9_PushButton_NavString(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.NavString = (global::System.String)Value;
        }
        private object get_10_PushButton_TabCount(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.TabCount;
        }
        private void set_10_PushButton_TabCount(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.TabCount = (global::System.Int32)Value;
        }
        private object get_11_PushButton_BorderBrushPointerOver(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.BorderBrushPointerOver;
        }
        private void set_11_PushButton_BorderBrushPointerOver(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.BorderBrushPointerOver = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_12_PushButton_ForegroundPressed(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.ForegroundPressed;
        }
        private void set_12_PushButton_ForegroundPressed(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.ForegroundPressed = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_13_PushButton_BorderBrushPressed(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.BorderBrushPressed;
        }
        private void set_13_PushButton_BorderBrushPressed(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.BorderBrushPressed = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_14_PushButton_CornerRadius(object instance)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            return that.CornerRadius;
        }
        private void set_14_PushButton_CornerRadius(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.PushButton)instance;
            that.CornerRadius = (global::Windows.UI.Xaml.CornerRadius)Value;
        }
        private object get_15_OptionButton_BackgroundPointerOver(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.BackgroundPointerOver;
        }
        private void set_15_OptionButton_BackgroundPointerOver(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.BackgroundPointerOver = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_16_OptionButton_ForegroundPointerOver(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.ForegroundPointerOver;
        }
        private void set_16_OptionButton_ForegroundPointerOver(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.ForegroundPointerOver = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_17_OptionButton_BackgroundChecked(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.BackgroundChecked;
        }
        private void set_17_OptionButton_BackgroundChecked(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.BackgroundChecked = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_18_OptionButton_NavString(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.NavString;
        }
        private void set_18_OptionButton_NavString(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.NavString = (global::System.String)Value;
        }
        private object get_19_OptionButton_ImgOpacity(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.ImgOpacity;
        }
        private void set_19_OptionButton_ImgOpacity(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.ImgOpacity = (global::System.Double)Value;
        }
        private object get_20_OptionButton_BorderBrushPointerOver(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.BorderBrushPointerOver;
        }
        private void set_20_OptionButton_BorderBrushPointerOver(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.BorderBrushPointerOver = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_21_OptionButton_OptionVisibility(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.OptionVisibility;
        }
        private void set_21_OptionButton_OptionVisibility(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.OptionVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_22_OptionButton_ForegroundChecked(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.ForegroundChecked;
        }
        private void set_22_OptionButton_ForegroundChecked(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.ForegroundChecked = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_23_OptionButton_BorderBrushChecked(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.BorderBrushChecked;
        }
        private void set_23_OptionButton_BorderBrushChecked(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.BorderBrushChecked = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_24_OptionButton_CornerRadius(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.CornerRadius;
        }
        private void set_24_OptionButton_CornerRadius(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.CornerRadius = (global::Windows.UI.Xaml.CornerRadius)Value;
        }
        private object get_25_OptionButton_Source(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.Source;
        }
        private void set_25_OptionButton_Source(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.Source = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_26_OptionButton_Stretch(object instance)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            return that.Stretch;
        }
        private void set_26_OptionButton_Stretch(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.OptionButton)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_27_HamburgerButton_ShowSymbol(object instance)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            return that.ShowSymbol;
        }
        private void set_27_HamburgerButton_ShowSymbol(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            that.ShowSymbol = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_28_HamburgerButton_ShowImage(object instance)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            return that.ShowImage;
        }
        private void set_28_HamburgerButton_ShowImage(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            that.ShowImage = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_29_HamburgerButton_IconSource(object instance)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            return that.IconSource;
        }
        private void set_29_HamburgerButton_IconSource(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            that.IconSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_30_HamburgerButton_IconStretch(object instance)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            return that.IconStretch;
        }
        private void set_30_HamburgerButton_IconStretch(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            that.IconStretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_31_HamburgerButton_Symbol(object instance)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            return that.Symbol;
        }
        private void set_31_HamburgerButton_Symbol(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            that.Symbol = (global::System.String)Value;
        }
        private object get_32_HamburgerButton_Label(object instance)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            return that.Label;
        }
        private void set_32_HamburgerButton_Label(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_33_HamburgerButton_SymbolFontFamily(object instance)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            return that.SymbolFontFamily;
        }
        private void set_33_HamburgerButton_SymbolFontFamily(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.HamburgerButton)instance;
            that.SymbolFontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_34_TextEdit_AcceptsTab(object instance)
        {
            var that = (global::Albert.Flex.Runtime.TextEdit)instance;
            return that.AcceptsTab;
        }
        private void set_34_TextEdit_AcceptsTab(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.TextEdit)instance;
            that.AcceptsTab = (global::System.Boolean)Value;
        }
        private object get_35_TextEdit_StringText(object instance)
        {
            var that = (global::Albert.Flex.Runtime.TextEdit)instance;
            return that.StringText;
        }
        private object get_36_CharacterLab_State(object instance)
        {
            var that = (global::aPowerBox.View.CharacterLab)instance;
            return that.State;
        }
        private void set_36_CharacterLab_State(object instance, object Value)
        {
            var that = (global::aPowerBox.View.CharacterLab)instance;
            that.State = (global::aPowerBox.View.CharacterLab.SheetState)Value;
        }
        private object get_37_ColorPicker_SpectrePointerColor(object instance)
        {
            var that = (global::Albert.Flex.Runtime.ColorPicker)instance;
            return that.SpectrePointerColor;
        }
        private void set_37_ColorPicker_SpectrePointerColor(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.ColorPicker)instance;
            that.SpectrePointerColor = (global::Windows.UI.Color)Value;
        }
        private object get_38_ColorPicker_Color(object instance)
        {
            var that = (global::Albert.Flex.Runtime.ColorPicker)instance;
            return that.Color;
        }
        private void set_38_ColorPicker_Color(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.ColorPicker)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_39_ColorPicker_Brush(object instance)
        {
            var that = (global::Albert.Flex.Runtime.ColorPicker)instance;
            return that.Brush;
        }
        private object get_40_ColorPicker_HexCode(object instance)
        {
            var that = (global::Albert.Flex.Runtime.ColorPicker)instance;
            return that.HexCode;
        }
        private object get_41_ColorPicker_HtmlCode(object instance)
        {
            var that = (global::Albert.Flex.Runtime.ColorPicker)instance;
            return that.HtmlCode;
        }
        private object get_42_SketchCanvas_SketchState(object instance)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            return that.SketchState;
        }
        private void set_42_SketchCanvas_SketchState(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            that.SketchState = (global::Albert.Flex.Runtime.SketchState)Value;
        }
        private object get_43_SketchCanvas_DrawBrush(object instance)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            return that.DrawBrush;
        }
        private void set_43_SketchCanvas_DrawBrush(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            that.DrawBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_44_SketchCanvas_DrawThickness(object instance)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            return that.DrawThickness;
        }
        private void set_44_SketchCanvas_DrawThickness(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            that.DrawThickness = (global::System.Double)Value;
        }
        private object get_45_SketchCanvas_DrawOpacity(object instance)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            return that.DrawOpacity;
        }
        private void set_45_SketchCanvas_DrawOpacity(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            that.DrawOpacity = (global::System.Double)Value;
        }
        private object get_46_SketchCanvas_StartPenLineCap(object instance)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            return that.StartPenLineCap;
        }
        private void set_46_SketchCanvas_StartPenLineCap(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            that.StartPenLineCap = (global::Windows.UI.Xaml.Media.PenLineCap)Value;
        }
        private object get_47_SketchCanvas_EndPenLineCap(object instance)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            return that.EndPenLineCap;
        }
        private void set_47_SketchCanvas_EndPenLineCap(object instance, object Value)
        {
            var that = (global::Albert.Flex.Runtime.SketchCanvas)instance;
            that.EndPenLineCap = (global::Windows.UI.Xaml.Media.PenLineCap)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember xamlMember = null;
            global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Albert.Flex.Runtime.ViewModel.Settings":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.ViewModel");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "Settings", "Windows.Storage.ApplicationDataContainer");
                xamlMember.Getter = get_0_ViewModel_Settings;
                xamlMember.SetIsReadOnly();
                break;
            case "Albert.Flex.Runtime.ViewModel.LocalFolder":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.ViewModel");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "LocalFolder", "Windows.Storage.StorageFolder");
                xamlMember.Getter = get_1_ViewModel_LocalFolder;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Color.A":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_2_Color_A;
                xamlMember.Setter = set_2_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_3_Color_B;
                xamlMember.Setter = set_3_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_4_Color_G;
                xamlMember.Setter = set_4_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_5_Color_R;
                xamlMember.Setter = set_5_Color_R;
                break;
            case "Albert.Flex.Runtime.PushButton.BackgroundPointerOver":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BackgroundPointerOver", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_PushButton_BackgroundPointerOver;
                xamlMember.Setter = set_6_PushButton_BackgroundPointerOver;
                break;
            case "Albert.Flex.Runtime.PushButton.ForegroundPointerOver":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "ForegroundPointerOver", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_PushButton_ForegroundPointerOver;
                xamlMember.Setter = set_7_PushButton_ForegroundPointerOver;
                break;
            case "Albert.Flex.Runtime.PushButton.BackgroundPressed":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BackgroundPressed", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_PushButton_BackgroundPressed;
                xamlMember.Setter = set_8_PushButton_BackgroundPressed;
                break;
            case "Albert.Flex.Runtime.PushButton.NavString":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "NavString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_PushButton_NavString;
                xamlMember.Setter = set_9_PushButton_NavString;
                break;
            case "Albert.Flex.Runtime.PushButton.TabCount":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "TabCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_PushButton_TabCount;
                xamlMember.Setter = set_10_PushButton_TabCount;
                break;
            case "Albert.Flex.Runtime.PushButton.BorderBrushPointerOver":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BorderBrushPointerOver", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_PushButton_BorderBrushPointerOver;
                xamlMember.Setter = set_11_PushButton_BorderBrushPointerOver;
                break;
            case "Albert.Flex.Runtime.PushButton.ForegroundPressed":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "ForegroundPressed", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_PushButton_ForegroundPressed;
                xamlMember.Setter = set_12_PushButton_ForegroundPressed;
                break;
            case "Albert.Flex.Runtime.PushButton.BorderBrushPressed":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BorderBrushPressed", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_PushButton_BorderBrushPressed;
                xamlMember.Setter = set_13_PushButton_BorderBrushPressed;
                break;
            case "Albert.Flex.Runtime.PushButton.CornerRadius":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.PushButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "CornerRadius", "Windows.UI.Xaml.CornerRadius");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_PushButton_CornerRadius;
                xamlMember.Setter = set_14_PushButton_CornerRadius;
                break;
            case "Albert.Flex.Runtime.OptionButton.BackgroundPointerOver":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BackgroundPointerOver", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_OptionButton_BackgroundPointerOver;
                xamlMember.Setter = set_15_OptionButton_BackgroundPointerOver;
                break;
            case "Albert.Flex.Runtime.OptionButton.ForegroundPointerOver":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "ForegroundPointerOver", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_OptionButton_ForegroundPointerOver;
                xamlMember.Setter = set_16_OptionButton_ForegroundPointerOver;
                break;
            case "Albert.Flex.Runtime.OptionButton.BackgroundChecked":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BackgroundChecked", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_OptionButton_BackgroundChecked;
                xamlMember.Setter = set_17_OptionButton_BackgroundChecked;
                break;
            case "Albert.Flex.Runtime.OptionButton.NavString":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "NavString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_OptionButton_NavString;
                xamlMember.Setter = set_18_OptionButton_NavString;
                break;
            case "Albert.Flex.Runtime.OptionButton.ImgOpacity":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "ImgOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_OptionButton_ImgOpacity;
                xamlMember.Setter = set_19_OptionButton_ImgOpacity;
                break;
            case "Albert.Flex.Runtime.OptionButton.BorderBrushPointerOver":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BorderBrushPointerOver", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_OptionButton_BorderBrushPointerOver;
                xamlMember.Setter = set_20_OptionButton_BorderBrushPointerOver;
                break;
            case "Albert.Flex.Runtime.OptionButton.OptionVisibility":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "OptionVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_OptionButton_OptionVisibility;
                xamlMember.Setter = set_21_OptionButton_OptionVisibility;
                break;
            case "Albert.Flex.Runtime.OptionButton.ForegroundChecked":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "ForegroundChecked", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_OptionButton_ForegroundChecked;
                xamlMember.Setter = set_22_OptionButton_ForegroundChecked;
                break;
            case "Albert.Flex.Runtime.OptionButton.BorderBrushChecked":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "BorderBrushChecked", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_OptionButton_BorderBrushChecked;
                xamlMember.Setter = set_23_OptionButton_BorderBrushChecked;
                break;
            case "Albert.Flex.Runtime.OptionButton.CornerRadius":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "CornerRadius", "Windows.UI.Xaml.CornerRadius");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_OptionButton_CornerRadius;
                xamlMember.Setter = set_24_OptionButton_CornerRadius;
                break;
            case "Albert.Flex.Runtime.OptionButton.Source":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "Source", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_OptionButton_Source;
                xamlMember.Setter = set_25_OptionButton_Source;
                break;
            case "Albert.Flex.Runtime.OptionButton.Stretch":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.OptionButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_OptionButton_Stretch;
                xamlMember.Setter = set_26_OptionButton_Stretch;
                break;
            case "Albert.Flex.Runtime.HamburgerButton.ShowSymbol":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.HamburgerButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "ShowSymbol", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_HamburgerButton_ShowSymbol;
                xamlMember.Setter = set_27_HamburgerButton_ShowSymbol;
                break;
            case "Albert.Flex.Runtime.HamburgerButton.ShowImage":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.HamburgerButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "ShowImage", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_HamburgerButton_ShowImage;
                xamlMember.Setter = set_28_HamburgerButton_ShowImage;
                break;
            case "Albert.Flex.Runtime.HamburgerButton.IconSource":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.HamburgerButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "IconSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_HamburgerButton_IconSource;
                xamlMember.Setter = set_29_HamburgerButton_IconSource;
                break;
            case "Albert.Flex.Runtime.HamburgerButton.IconStretch":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.HamburgerButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "IconStretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_HamburgerButton_IconStretch;
                xamlMember.Setter = set_30_HamburgerButton_IconStretch;
                break;
            case "Albert.Flex.Runtime.HamburgerButton.Symbol":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.HamburgerButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "Symbol", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_HamburgerButton_Symbol;
                xamlMember.Setter = set_31_HamburgerButton_Symbol;
                break;
            case "Albert.Flex.Runtime.HamburgerButton.Label":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.HamburgerButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_HamburgerButton_Label;
                xamlMember.Setter = set_32_HamburgerButton_Label;
                break;
            case "Albert.Flex.Runtime.HamburgerButton.SymbolFontFamily":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.HamburgerButton");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "SymbolFontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_HamburgerButton_SymbolFontFamily;
                xamlMember.Setter = set_33_HamburgerButton_SymbolFontFamily;
                break;
            case "Albert.Flex.Runtime.TextEdit.AcceptsTab":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.TextEdit");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "AcceptsTab", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_TextEdit_AcceptsTab;
                xamlMember.Setter = set_34_TextEdit_AcceptsTab;
                break;
            case "Albert.Flex.Runtime.TextEdit.StringText":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.TextEdit");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "StringText", "String");
                xamlMember.Getter = get_35_TextEdit_StringText;
                xamlMember.SetIsReadOnly();
                break;
            case "aPowerBox.View.CharacterLab.State":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("aPowerBox.View.CharacterLab");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "State", "aPowerBox.View.CharacterLab.SheetState");
                xamlMember.Getter = get_36_CharacterLab_State;
                xamlMember.Setter = set_36_CharacterLab_State;
                break;
            case "Albert.Flex.Runtime.ColorPicker.SpectrePointerColor":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.ColorPicker");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "SpectrePointerColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ColorPicker_SpectrePointerColor;
                xamlMember.Setter = set_37_ColorPicker_SpectrePointerColor;
                break;
            case "Albert.Flex.Runtime.ColorPicker.Color":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.ColorPicker");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ColorPicker_Color;
                xamlMember.Setter = set_38_ColorPicker_Color;
                break;
            case "Albert.Flex.Runtime.ColorPicker.Brush":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.ColorPicker");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "Brush", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.Getter = get_39_ColorPicker_Brush;
                xamlMember.SetIsReadOnly();
                break;
            case "Albert.Flex.Runtime.ColorPicker.HexCode":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.ColorPicker");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "HexCode", "String");
                xamlMember.Getter = get_40_ColorPicker_HexCode;
                xamlMember.SetIsReadOnly();
                break;
            case "Albert.Flex.Runtime.ColorPicker.HtmlCode":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.ColorPicker");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "HtmlCode", "String");
                xamlMember.Getter = get_41_ColorPicker_HtmlCode;
                xamlMember.SetIsReadOnly();
                break;
            case "Albert.Flex.Runtime.SketchCanvas.SketchState":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.SketchCanvas");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "SketchState", "Albert.Flex.Runtime.SketchState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_SketchCanvas_SketchState;
                xamlMember.Setter = set_42_SketchCanvas_SketchState;
                break;
            case "Albert.Flex.Runtime.SketchCanvas.DrawBrush":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.SketchCanvas");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "DrawBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_SketchCanvas_DrawBrush;
                xamlMember.Setter = set_43_SketchCanvas_DrawBrush;
                break;
            case "Albert.Flex.Runtime.SketchCanvas.DrawThickness":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.SketchCanvas");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "DrawThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_SketchCanvas_DrawThickness;
                xamlMember.Setter = set_44_SketchCanvas_DrawThickness;
                break;
            case "Albert.Flex.Runtime.SketchCanvas.DrawOpacity":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.SketchCanvas");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "DrawOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_SketchCanvas_DrawOpacity;
                xamlMember.Setter = set_45_SketchCanvas_DrawOpacity;
                break;
            case "Albert.Flex.Runtime.SketchCanvas.StartPenLineCap":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.SketchCanvas");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "StartPenLineCap", "Windows.UI.Xaml.Media.PenLineCap");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_SketchCanvas_StartPenLineCap;
                xamlMember.Setter = set_46_SketchCanvas_StartPenLineCap;
                break;
            case "Albert.Flex.Runtime.SketchCanvas.EndPenLineCap":
                userType = (global::aPowerBox.aPowerBox_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Albert.Flex.Runtime.SketchCanvas");
                xamlMember = new global::aPowerBox.aPowerBox_XamlTypeInfo.XamlMember(this, "EndPenLineCap", "Windows.UI.Xaml.Media.PenLineCap");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_SketchCanvas_EndPenLineCap;
                xamlMember.Setter = set_47_SketchCanvas_EndPenLineCap;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::aPowerBox.aPowerBox_XamlTypeInfo.XamlSystemBaseType
    {
        global::aPowerBox.aPowerBox_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::aPowerBox.aPowerBox_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::aPowerBox.aPowerBox_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::aPowerBox.aPowerBox_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

